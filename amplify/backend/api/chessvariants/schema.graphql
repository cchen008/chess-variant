type User @model @auth(rules: [
    { allow: owner, ownerField: "id", operations: [read, update] },
    { allow: groups, groups: ["Admin"] },
    { allow: public, operations: [read] },
]) {
  id: ID!
  username: String!
  email: String!
  phoneNumber: String!
  pastGames: [PlayerGameMapping] @connection(name: "userPlayer")
  points: Int
  skillLevel: String
  rank: Int
  createdAt: String
}

type Complaint @model @auth(
  rules: [
    { allow: public, operations: [create] },
    { allow: groups, groups: ["Admin"] }
  ]
) {
  id: ID!
  user: User @connection
  content: String!
  processed: Boolean!
  processedBy: User
  createdAt: String
}

type PlayerGameMapping @model(queries: null) {
  id: ID!
  game: Game! @connection(name: "playerGame")
  player: User! @connection(name: "userPlayer")
}

type Game @model(subscriptions: null) @auth(rules: [{ allow: public }]) {
  id: ID!
  players: [PlayerGameMapping] @connection(name: "playerGame") # for registered users only
  creator: PlayerInfo!
  opponent: PlayerInfo
  creatorOrientation: String!
  time: String!
  variant: String!
  fen: String!
  available: Boolean!
  ended: Boolean!
  history: [String]
  result: String
  winner: String
  createdAt: String
  messages: [Message] @connection(name: "GameMessages")
}

type Message @model{
  id: ID!
  author: PlayerInfo
  content: String!
  game: Game @connection(name: "GameMessages")
}

type PlayerInfo {
  id: ID!
  username: String!
}

input UpdateGameStateInput {
	id: ID!
	time: String
	fen: String
	history: [String]
	result: String
	winner: String
  ended: Boolean
}

type Mutation {
  updateGameState(input: UpdateGameStateInput!): Game
}

type Subscription {
  onCreateGame: Game
		@aws_subscribe(mutations: ["createGame"])
	onUpdateGame: Game
		@aws_subscribe(mutations: ["updateGame"])
	onDeleteGame: Game
		@aws_subscribe(mutations: ["deleteGame"])
	onUpdateGameState(id: ID!): Game
		@aws_subscribe(mutations: ["updateGameState"])
}